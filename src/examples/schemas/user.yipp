enum UserType {
  admin
  user
}

"Useful user documentation..."
type User {
  id: Int!
  username: String!
  age: Int!
  type: UserType!
  isCool: Boolean!
  createdAt: DateTime!
}

"Get all users"
getUsers: GET /users {
  headers: AuthenticatedRoute

  "Optional filters"
  query: {
    "Free text search"
    q: String
  }

  200: {
    "An array of users"
    body: [User!]
  }

  400: {
    body: Error
  }
}


getUser: GET /users/:id(Int) {
  200: {
    body: User
  }

  400: {
    body: Error
  }
}


postUser: POST /users {
  headers: AuthenticatedRoute

  body: {
    username: String!
    age: Int!
    type: UserType!
    isCool: Boolean!
  }

  200: {
    body: User
  }

  400: {
    body: Error
  }
}

"""
Update user takes user-fields
as input and returns the updated user
"""
updateUser: PATCH /users/:id(Int) {
  """
  Authenticated route. Must pass correct JWT.
  """
  headers: AuthenticatedRoute

  body: {
    username: String
    age: Int
    isCool: Boolean
    createdAt: DateTime
  }

  200: {
    """
    The updated user
    """
    body: User
  }

  400: {
    body: Error
  }

  404: {
    body: Error
  }
}
